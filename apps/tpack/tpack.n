.\" Automatically generated by Pandoc 2.14.2
.\"
.TH "tpack 0.3.0 - Tcl application deployment" "" "2022-02-17" "" ""
.hy
.SS NAME
.PP
\f[I]tpack\f[R] - create single or two file Tcl applications based on
libraries in tar/lz4 archives
.SS SYNOPSIS
.IP
.nf
\f[C]
$ tpack --help               # display usage information
$ tpack wrap app.tapp        # wraps app.tcl and app.vfs into app.tapp 
                             # where app.vfs is attached as tar archive
$ tpack wrap app.tapp --lz4  # as above but use tar and lz4 for compression
$ tpack wrap app.tcl app.vfs # wraps app.tcl into app.ttcl and app.vfs into app.ttar
$ tpack wrap app             #            as above
$ tpack init app.tcl app.vfs # creates initial file app.tcl and folder app.vfs
$ tpack init app             #            as above
$ tpack init app.vfs         # create initial folder app.vfs
$ tpack unwrap app.tapp      # extracts app.tcl and app.ttar/lz4 out of app.tapp
\f[R]
.fi
.SS DESCRIPTION
.PP
The \f[I]tpack\f[R] application can be used to simplify deployment of
Tcl applications to other computers and customers.
The application can create single and two file applications.
Single file applications, called tapp-files contain at the top the tar
extraction code, the main tcl script and an attached tar archive
containing the libraries required by this application file.
At startup the tar file is detached from the file and unpacked into a
temporary folder from where the libraries are loaded.
The compression with lz4 needs an installed lz4 executable, the
decompression of the build executable is embedded into the final
application but requires a Tcl installation of at least 8.5.
.PP
The single file approach create as \f[I]app.tapp\f[R] file out of
\f[I]app.vfs\f[R] and \f[I]app.tcl\f[R].
.PP
The two file approach creates a ttcl-file for the application and a
ttar-file for the library files.
The unpacking of the library code in the tar archives is done only if
the tapp file is newer then the files in the temporary directorywhere
the files are extracted.
If we assume that we have the application code in a file
\f[I]app.tcl\f[R] and the Tcl libraries in a folder
\f[I]app.vfs/lib\f[R] together with a file \f[I]app.vfs/main.tcl\f[R].
The call \f[C]$ tpack.tcl app.tcl app.vfs\f[R] will create two files:
.RS
.IP \[bu] 2
\f[I]app.ttcl\f[R] - text file containing the application code from
\f[I]app.tcl\f[R] and some code from the tar library to extract tar
files
.IP \[bu] 2
\f[I]app.ttar\f[R] - the library files from \f[I]app.vfs\f[R]
.RE
.PP
The file \f[I]main.tcl\f[R] in the vfs-folder should contain at least
the following line:
.IP
.nf
\f[C]
lappend auto_path [file join [file dirname [info script]] lib]
\f[R]
.fi
.PP
The \f[I]tpack\f[R] application provides as well a loader for default
starkit layouts, so a fake starkit package so that as well existing
starkits can be packed by \f[I]tpack\f[R], here a \f[I]main.tcl\f[R]
file from the tknotepad application.
.IP
.nf
\f[C]
package require starkit
if {[starkit::startup] == \[dq]sourced\[dq]} return
package require app-tknotepad
\f[R]
.fi
.PP
In this case the application file tknotepad.tcl which is in the same
directoy as \f[I]tknotepad.vfs\f[R] can be just an empty file.
It can as well contain code to handel command line arguments.
Here the file tknotepad.tcl:
.IP
.nf
\f[C]
proc usage {} {
    puts \[dq]Usage: tknotepad filename\[dq]
}
if {[info exists argv0] && $argv0 eq [info script] && [regexp tknotepad $argv0]} {
    if {[llength $argv] > -1 && [lsearch $argv --help] > -1} {
        usage
    } elseif {[llength $argv] > 0 && [file exists [lindex $argv 0]]} {
        openoninit [lindex $argv 0]
    }
}
\f[R]
.fi
.PP
That way you should be able to use your vfs-folder for creating tpacked
applications as well for creating starkits.
.SS INSTALLATION
.PP
Make this file \f[I]tpack.tcl\f[R] executable and copy it as
\f[I]tpack\f[R] into a directory belonging to your PATH environment.
There are no other Tcl libraries required to install, just a working
installation of Tcl/Tk is required.
.SS EXAMPLE
.PP
Let\[cq]s demonstrate a minimal application:
.IP
.nf
\f[C]
## FILE mini.tcl
#!/usr/bin/env tclsh
package require test
puts mini
puts [test::hello]
## FILE mini.vfs/main.tcl
lappend auto_path [file join [file dirname [info script]] lib]
## FILE mini.vfs/lib/test/pkgIndex.tcl
package ifneeded test 0.1 [list source [file join $dir test.tcl]]
## FILE mini.vfs/lib/test/test.tcl
package require Tcl
package provide test 0.1
namespace eval ::test { }
proc ::test::hello { } { puts \[dq]Hello World!\[dq] }
## EOF\[aq]s
\f[R]
.fi
.PP
There is the possibility to create such a minimal application
automatically for you if you start a new project by using the command
line options:
.IP
.nf
\f[C]
$ tpack init appname
# - appname.tcl and appname.vfs folder with main.tcl and
#   lib/test Tcl files will be created automatically for you.
\f[R]
.fi
.PP
The string \f[I]appname\f[R] has to be replaced with the name of your
application.
If a the Tcl file or the VFS folder does already exists, \f[I]tpack\f[R]
for your safeness will refuse to overwrite them.
If the files were created, you can overwrite the Tcl file
(\f[I]appname.tcl\f[R]) with your own application and move your
libraries into the folder \f[I]appname.vfs\f[R].
If you are ready you call \f[C]tpack wrap appname.tcl appname.vfs\f[R]
and you end up with two new files, \f[I]appname.ttcl\f[R] your
application code file, containing your code as well as some code from
the tcllib tar package to unwrap your library file
\f[I]appname.ttar\f[R] at program runtime.
The ttar file contains your library files taken from the
\f[I]appname.vfs\f[R] folder.
You can move those two files around together and execute
\f[I]appname.ttcl\f[R], it will unpack the tar file into a temporary
directory, only if the tar file is newer than the directory and load the
libraries from there.
You can as well rename \f[I]appname.ttcl\f[R] to \f[I]appname\f[R] but
your tar-file should always have the same basename.
.PP
Attention: if mini.ttcl is executed directly in the directory where
mini.vfs is located not the tar file but the folder will be used for the
libraries.
That can simplify the development.
.PP
You can rename mini.ttcl to what every you like so \f[C]mini.bin\f[R] or
even \f[C]mini\f[R], but the extension for the tar file must stay
unchanged and must be in the same folder as the mini application file.
.PP
The tpack.tcl script, the minimal application and this Readme are as
well packed together in a Zip archive which is available here:
tpack.zip (https://downgit.github.io/#/home?url=https://github.com/mittelmark/DGTcl/tree/master/apps/tpack)
.SS CHANGELOG
.IP \[bu] 2
2021-09-10 - release 0.1 - two file applications (ttcl and ttar) are
working
.IP \[bu] 2
2021-11-10 - release 0.2.0
.RS 2
.IP \[bu] 2
single file applications (ttap = ttcl+ttar in one file) are working as
well
.IP \[bu] 2
fake starkit::startup to load existing starkit apps without modification
.IP \[bu] 2
build sample apps tknotepad, pandoc-tcl-filter,
.RE
.IP \[bu] 2
2021-11-26 - release 0.2.1
.RS 2
.IP \[bu] 2
bugfix: adding \f[C]package forget tar\f[R] after tar file loading to
catch users \f[C]package require tar\f[R]
.RE
.IP \[bu] 2
2022-02-16 - release 0.3.0
.RS 2
.IP \[bu] 2
support for lz4 compression/decompression
.RE
.SS TODO
.IP \[bu] 2
tpack wrap napp.tapp - single file applications whith attached tar
archive (done 0.2.0)
.IP \[bu] 2
tpack init napp - napp.tcl and napp.vfs will be created (done)
.IP \[bu] 2
tpack init napp.tcl - napp.tcl exists and napp.vfs will be created
(done)
.IP \[bu] 2
tpack wrap napp.tcl - napp.ttcl and napp.ttar wull be created out of
napp.tcl and napp.vfs (done)
.IP \[bu] 2
tpack wrap napp.tcl napp2.vfs - napp.ttcl napp.ttar will be created out
of napp.tcl and napp2.vfs (done)
.IP \[bu] 2
tpack unwrap napp.ttar - create napp.vfs (just an untar, done)
.IP \[bu] 2
tpack unwrap napp.tapp - create napp.tcl and napp.ttar (done)
.IP \[bu] 2
using ttar.gz files with Tcl 8.6 and zlib and with Tcl 8.5/8.4 gunzip
terminal app
.IP \[bu] 2
using Tcl only lz4 compression, option for Tcl 8.5/8.6 (done)
.IP \[bu] 2
nsis installer for Windows, to deploy minimal Tcl/Tk with the
application
.SS AUTHOR
.IP \[bu] 2
Copyright (c) 2021-2022 Detlef Groth, Caputh-Schwielowsee, Germany,
detlef(at)dgroth(dot)de (tpack code)
.IP \[bu] 2
Copyright (c) 2017 dbohdan pur Tcl lz4 decompression code
.IP \[bu] 2
Copyright (c) 2013 Andreas Kupries
andreas_kupries(at)users.sourceforge(dot)net (tar code)
.IP \[bu] 2
Copyright (c) 2004 Aaron Faupell afaupell(at)users.sourceforge(sot)net
(tar code)
.SS LICENSE
.PP
MIT - License
.SH AUTHORS
Detlef Groth, Caputh-Schwielowsee, Germany.
